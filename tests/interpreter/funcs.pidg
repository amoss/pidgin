func foo:int [x:int y:set<string>] {
    return x+len!y
}

func blah:int [left:set<string> right:set<string>] {
    x = foo![x:len!left y:right]
    y = [x:len!right y:left]
    return x + foo!y
}

enum SymbolClass [ Terminal Nonterminal ]
enum Modifier    [ Just Any Some Optional ]

type symbol:[enum SymbolClass, string, set<string>, enum Modifier, bool]
func TA:type symbol  [s:set<string>]    { return [:Terminal    :'" :s  :Any      :false] }
func TS:type symbol  [s:set<string>]    { return [:Terminal    :'" :s  :Some     :false] }
func TAN:type symbol [s:set<string>]    { return [:Terminal    :'" :s  :Any      :true ] }
func TO:type symbol  [s:string]         { return [:Terminal    :s  :{} :Optional :false] }
func N:type symbol   [n:string]         { return [:Nonterminal :n  :{} :Just     :false] }
func NA:type symbol  [n:string]         { return [:Nonterminal :n  :{} :Any      :false] }
func NO:type symbol  [n:string]         { return [:Nonterminal :n  :{} :Optional :false] }
func NS:type symbol  [n:string]         { return [:Nonterminal :n  :{} :Some     :false] }

num = blah![left:{'1",'2"} right:{'1",'2",'3"}]

if num>5
{
    if num>6
    {
        print!num
    }
}
else {
    print!num
}

clause = TA![s:{'x" 'y"}]
print!clause
